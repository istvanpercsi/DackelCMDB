/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.percsi.product.entitymanager.controller;
//
//import com.fasterxml.jackson.databind.ObjectMapper;
//import de.percsi.products.entitymanager.controller.model.Error;
//import de.percsi.products.entitymanager.controller.model.ExtendedPropertyResponse;
//import de.percsi.products.entitymanager.controller.model.ListOfSimplePropertyResponse;
//import de.percsi.products.entitymanager.controller.model.SimplePropertyRequest;
//import io.swagger.v3.oas.annotations.Operation;
//import io.swagger.v3.oas.annotations.Parameter;
//import io.swagger.v3.oas.annotations.enums.ParameterIn;
//import io.swagger.v3.oas.annotations.media.Content;
//import io.swagger.v3.oas.annotations.media.Schema;
//import io.swagger.v3.oas.annotations.responses.ApiResponse;
//import io.swagger.v3.oas.annotations.responses.ApiResponses;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.validation.annotation.Validated;
//import org.springframework.web.bind.annotation.*;
//
//import javax.servlet.http.HttpServletRequest;
//import javax.validation.Valid;
//import java.io.IOException;
//import java.util.Optional;
//import java.util.UUID;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-09T22:47:16.525653700+01:00[Europe/Berlin]")

public interface PropertiesApi {
//
//    Logger log = LoggerFactory.getLogger(PropertiesApi.class);
//
//    default Optional<ObjectMapper> getObjectMapper(){
//        return Optional.empty();
//    }
//
//    default Optional<HttpServletRequest> getRequest(){
//        return Optional.empty();
//    }
//
//    default Optional<String> getAcceptHeader() {
//        return getRequest().map(r -> r.getHeader("Accept"));
//    }
//
//    @Operation(summary = "List of valid properties", description = "Lists all of the properties, which are saved in system, and it can be attach to the entity.", tags={ "properties" })
//    @ApiResponses(value = {
//        @ApiResponse(responseCode = "200", description = "Returns the list of saved property types", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListOfSimplePropertyResponse.class))),
//
//        @ApiResponse(responseCode = "400", description = "Bad request error, it can happen if some of the parameters are wrong, or out of range.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
//
//        @ApiResponse(responseCode = "500", description = "Internal server error happened. Details in error message.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
//    @RequestMapping(value = "/properties",
//        produces = { "application/json" },
//        method = RequestMethod.GET)
//    default ResponseEntity<ListOfSimplePropertyResponse> getProperties(@Parameter(in = ParameterIn.QUERY, description = "Page of the result list" ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Long page, @Parameter(in = ParameterIn.QUERY, description = "Size of the page of the result list" ,schema=@Schema()) @Valid @RequestParam(value = "size", required = false) Long size, @Parameter(in = ParameterIn.QUERY, description = "Filtered value of the entity. Magic character * can be used" ,schema=@Schema()) @Valid @RequestParam(value = "filter", required = false) String filter) {
//        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
//            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"properties\" : [ {\r\n    \"name\" : \"Name of property\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  }, {\r\n    \"name\" : \"Name of property\",\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\r\n  } ]\r\n}", ListOfSimplePropertyResponse.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
//            }
//        } else {
//            log.warn("ObjectMapper or HttpServletRequest not configured in default PropertiesApi interface so no example is generated");
//        }
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//    }
//
//
//    @Operation(summary = "Get property and its metadata", description = "It returns detailed informations about selected property.", tags={ "properties" })
//    @ApiResponses(value = {
//        @ApiResponse(responseCode = "200", description = "Returns with the selected property", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyResponse.class))),
//
//        @ApiResponse(responseCode = "404", description = "Not found, if the given uuid is not exists.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
//
//        @ApiResponse(responseCode = "500", description = "Internal server error happened. Details in error message.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
//    @RequestMapping(value = "/property/{uuidOfProperty}",
//        produces = { "application/json" },
//        method = RequestMethod.GET)
//    default ResponseEntity<ExtendedPropertyResponse> getProperty(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("uuidOfProperty") UUID uuidOfProperty) {
//        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
//            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"multiplicity\" : \"SINGLE\",\r\n  \"creator\" : \"creator\",\r\n  \"name\" : \"Name of property\",\r\n  \"format\" : \"format of display -> java text format\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"type\" : \"STRING\",\r\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", ExtendedPropertyResponse.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
//            }
//        } else {
//            log.warn("ObjectMapper or HttpServletRequest not configured in default PropertiesApi interface so no example is generated");
//        }
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//    }
//
//
//    @Operation(summary = "Saves a new property", description = "Saves a new property with their settings.", tags={ "properties" })
//    @ApiResponses(value = {
//        @ApiResponse(responseCode = "200", description = "Returns the saved new property", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyResponse.class))),
//
//        @ApiResponse(responseCode = "409", description = "Conflict, it can happen if the property with this name is already saved in system.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
//
//        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
//    @RequestMapping(value = "/property",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    default ResponseEntity<ExtendedPropertyResponse> saveProperty(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SimplePropertyRequest body) {
//        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
//            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"multiplicity\" : \"SINGLE\",\r\n  \"creator\" : \"creator\",\r\n  \"name\" : \"Name of property\",\r\n  \"format\" : \"format of display -> java text format\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"type\" : \"STRING\",\r\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", ExtendedPropertyResponse.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
//            }
//        } else {
//            log.warn("ObjectMapper or HttpServletRequest not configured in default PropertiesApi interface so no example is generated");
//        }
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//    }
//
//
//    @Operation(summary = "Updates property", description = "Updates the data of property, it is only possible if the property does not attached to the entity.", tags={ "properties" })
//    @ApiResponses(value = {
//        @ApiResponse(responseCode = "200", description = "Returns the updated property", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyResponse.class))),
//
//        @ApiResponse(responseCode = "405", description = "Not allowed, it can happen if the property is already in use, also attached to the entity.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
//
//        @ApiResponse(responseCode = "409", description = "Conflict, it can happen if the property with this name is already saved in system.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
//
//        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
//    @RequestMapping(value = "/property/{uuidOfProperty}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    default ResponseEntity<ExtendedPropertyResponse> updateProperty(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("uuidOfProperty") UUID uuidOfProperty, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SimplePropertyRequest body) {
//        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
//            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"multiplicity\" : \"SINGLE\",\r\n  \"creator\" : \"creator\",\r\n  \"name\" : \"Name of property\",\r\n  \"format\" : \"format of display -> java text format\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"type\" : \"STRING\",\r\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", ExtendedPropertyResponse.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
//            }
//        } else {
//            log.warn("ObjectMapper or HttpServletRequest not configured in default PropertiesApi interface so no example is generated");
//        }
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//    }

}

