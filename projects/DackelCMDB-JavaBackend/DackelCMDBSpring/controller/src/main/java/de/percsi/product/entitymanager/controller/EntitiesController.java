/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.percsi.product.entitymanager.controller;

import de.percsi.product.entitymanager.configuration.ConfigForSpringDoc;
import de.percsi.product.entitymanager.domain.*;
import de.percsi.product.entitymanager.domain.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.UUID;


public interface EntitiesController {

  @Operation(summary = "Get the list of entities",
      description = "Get list of entities. If there is no parameter defined, then it retunrs the last 20 element.",
      tags={ ConfigForSpringDoc.Tags.ENTITIES})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Retuns list of entities - id and name of entiy",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListOfSimpleEntities.class))),
      @ApiResponse(responseCode = "400",
          description = "Bad request error, it can happen if some of the parameters are wrong, or out of range.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error happened. Details in error message.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entities",
      produces = { "application/json" },
      method = RequestMethod.GET)
  default ResponseEntity<ListOfSimpleEntities> getListOfEntities(
      @Parameter(in = ParameterIn.QUERY, description = "Page of the result list" ,schema=@Schema())
      @Valid
      @RequestParam(value = "page", required = false) Long page,
      @Parameter(in = ParameterIn.QUERY, description = "Size of the page of the result list" ,schema=@Schema())
      @Valid
      @RequestParam(value = "size", required = false) Long size,
      @Parameter(in = ParameterIn.QUERY, description = "Filtered value of the entity. Magic character * can be used" ,schema=@Schema())
      @Valid
      @RequestParam(value = "filter", required = false) String filter) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

  @Operation(summary = "Get an entity and its metadata.",
      description = "Get an Entity. It returns with the entity metadata (name, uuid, create date, last modified date, creator modifier, etc)",
      tags={ConfigForSpringDoc.Tags.ENTITIES})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Returns an Entity with all of the informations, as well as meta infos, added properties, etc.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedEntityResponse.class))),
      @ApiResponse(responseCode = "404",
          description = "Entity not found error. If the id of entity does not exist",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error. If there some error happened during the query of the entity. Details in error.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity/{uuidOfEntity}",
      produces = { "application/json" },
      method = RequestMethod.GET)
  default ResponseEntity<ExtendedEntityResponse> getEntity(
      @Parameter(in = ParameterIn.PATH, description = "UUID of entity, it is uniq identifier for entity", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfEntity") UUID uuidOfEntity) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

  @Operation(summary = "Get the properties of entity.",
      description = "It retruns the property value pairs which belongs to the invoked entity.",
      tags={ ConfigForSpringDoc.Tags.ENTITIES })
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Returns the list of properties",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListOfSimplePropertyValueResponse.class))),
      @ApiResponse(responseCode = "404",
          description = "Not found, if the entity is not found in database.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error, if something wrong happened :)",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity/{uuidOfEntity}/properties",
      produces = { "application/json" },
      method = RequestMethod.GET)
  default ResponseEntity<ListOfSimplePropertyValueResponse> getPropertiesOfEntity(
      @Parameter(in = ParameterIn.PATH, description = "UUID of entity, it is uniq identifier for entity", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfEntity") UUID uuidOfEntity) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

  @Operation(summary = "Get property and its value of entity",
      description = "Based on uuid of entity and uuid of property this endpoint returns with full information of the value of the property which " +
          "belongs to the entity",
      tags={ ConfigForSpringDoc.Tags.ENTITIES })
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Returns the value of Property of the entity with all of their metadata",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyValueResponse.class))),
      @ApiResponse(responseCode = "404",
          description = "Not found, if the entity or the property is not exists with the given uuid.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity/{uuidOfEntity}/property/{uuidOfProperty}",
      produces = { "application/json" },
      method = RequestMethod.GET)
  default ResponseEntity<ExtendedPropertyValueResponse> getPropertyAndItsValueOfEntity(
      @Parameter(in = ParameterIn.PATH, description = "UUID of entity, it is uniq identifier for entity", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfEntity") UUID uuidOfEntity,
      @Parameter(in = ParameterIn.PATH, description = "UUID of property, it is uniq identifier for property", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfProperty") UUID uuidOfProperty) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }


  @Operation(summary = "Save an entity",
      description = "Save an entity on a given name. After saving entity, you can add more properties. Name property is a mandatory property. " +
          "Name must be uniq.",
      tags={ ConfigForSpringDoc.Tags.ENTITIES })
  @ApiResponses(value = {
      @ApiResponse(responseCode = "201",
          description = "Returns the saved entity with the given name.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedEntityResponse.class))),
      @ApiResponse(responseCode = "400",
          description = "Bad request, it can happen, if the name of the entity is null. Details can be found in error message",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "409",
          description = "Bad request, it can happen, if the name of the entity is the same as an another entity, which is already saved.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error. if there is some technical problem with saving of data.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity",
      produces = { "application/json" },
      consumes = { "application/json" },
      method = RequestMethod.POST)
  default ResponseEntity<ExtendedEntityResponse> saveEntity(
      @Parameter(in = ParameterIn.DEFAULT, description = "Simple request, it contains all data which is necessary to save record", schema=@Schema())
      @Valid
      @RequestBody SimpleEntityRequest body) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  @Operation(summary = "Save a value of property for the entity.",
      description = "It attaches a property to the entity and saves its value which belongs to entity.",
      tags={ ConfigForSpringDoc.Tags.ENTITIES })
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Returns with the saved property value pair, and their meatadata.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyValueResponse.class))),
      @ApiResponse(responseCode = "404",
          description = "Not found, it can happen if entity or property cannot be found with the given uuid.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "409",
          description = "Conflict, it can happen if the property multiplicity is single and it is already added to entity with value.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity/{uuidOfEntity}/property/{uuidOfProperty}",
      produces = { "application/json" },
      consumes = { "application/json" },
      method = RequestMethod.POST)
  default ResponseEntity<ExtendedPropertyValueResponse> saveValueOfPropertyForEntity(
      @Parameter(in = ParameterIn.PATH, description = "UUID of entity, it is uniq identifier for entity", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfEntity") UUID uuidOfEntity,
      @Parameter(in = ParameterIn.PATH, description = "UUID of property, it is uniq identifier for property", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfProperty") UUID uuidOfProperty,
      @Parameter(in = ParameterIn.DEFAULT, description = "Simple request, it contains all data which is necessary to save record", schema=@Schema())
      @Valid
      @RequestBody SimplePropertyValueRequest body) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

  @Operation(summary = "Updates a value of property for the entity.",
      description = "It updates a value of property for the entity.",
      tags={ ConfigForSpringDoc.Tags.ENTITIES })
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200",
          description = "Returns with the saved property value pair, and their meatadata.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExtendedPropertyValueResponse.class))),
      @ApiResponse(responseCode = "404",
          description = "Not found, it can happen if entity or property cannot be found with the given uuid.",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "500",
          description = "Internal server error",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
      @ApiResponse(responseCode = "501",
          description = "Endpoint is not implemented",
          content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/entity/{uuidOfEntity}/property/{uuidOfProperty}",
      produces = { "application/json" },
      consumes = { "application/json" },
      method = RequestMethod.PUT)
  default ResponseEntity<ExtendedPropertyValueResponse> updateValueOfPropertyForEntity(
      @Parameter(in = ParameterIn.PATH, description = "UUID of entity, it is uniq identifier for entity", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfEntity") UUID uuidOfEntity,
      @Parameter(in = ParameterIn.PATH, description = "UUID of property, it is uniq identifier for property", required=true, schema=@Schema())
      @Valid
      @PathVariable("uuidOfProperty") UUID uuidOfProperty,
      @Parameter(in = ParameterIn.DEFAULT, description = "Simple request, it contains all data which is necessary to save record", schema=@Schema())
      @Valid
      @RequestBody SimplePropertyValueRequest body) {

    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}

